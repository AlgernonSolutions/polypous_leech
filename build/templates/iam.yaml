AWSTemplateFormatVersion: 2010-09-09
Resources:
  readSecrets:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-readSecrets"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'secretsmanager:GetSecretValue'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  writeXray:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-writeXRay"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
              - 'xray:GetSamplingRules'
              - 'xray:GetSamplingTargets'
              - 'xray:GetSamplingStatisticSummaries'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  worker:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${AWS::StackName}-worker"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
                - events.amazonaws.com
                - lambda.amazonaws.com
  workStateMachine:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-workStateMachine"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'states:DescribeStateMachineForExecution'
              - 'states:ListStateMachines'
              - 'states:DescribeStateMachine'
              - 'states:DescribeExecution'
              - 'states:ListExecutions'
              - 'states:GetExecutionHistory'
              - 'states:StartExecution'
              - 'states:StopExecution'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  accessVpc:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-accessVpc"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:DeleteNetworkInterface'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  workS3:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-workS3"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 's3:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  workParameterStore:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-workParameterStore"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'ssm:GetParameter'
              - 'ssm:PutParameter'
              - 'ssm:GetParameterHistory'
              - 'ssm:DeleteParameter'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  workLogs:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-workLogs"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  sendSesEmail:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-sendSesEmail"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'ses:ListTemplates'
              - 'ses:ListCustomVerificationEmailTemplates'
              - 'ses:VerifyEmailIdentity'
              - 'ses:GetIdentityPolicies'
              - 'ses:GetSendQuota'
              - 'ses:DescribeConfigurationSet'
              - 'ses:ListReceiptFilters'
              - 'ses:GetIdentityMailFromDomainAttributes'
              - 'ses:VerifyDomainDkim'
              - 'ses:VerifyDomainIdentity'
              - 'ses:SendEmail'
              - 'ses:ListConfigurationSets'
              - 'ses:SendTemplatedEmail'
              - 'ses:SendCustomVerificationEmail'
              - 'ses:GetIdentityDkimAttributes'
              - 'ses:UpdateTemplate'
              - 'ses:DescribeReceiptRuleSet'
              - 'ses:ListReceiptRuleSets'
              - 'ses:GetTemplate'
              - 'ses:ListIdentities'
              - 'ses:VerifyEmailAddress'
              - 'ses:GetCustomVerificationEmailTemplate'
              - 'ses:SendRawEmail'
              - 'ses:GetSendStatistics'
              - 'ses:SendBounce'
              - 'ses:GetIdentityVerificationAttributes'
              - 'ses:GetIdentityNotificationAttributes'
              - 'ses:ListIdentityPolicies'
              - 'ses:DescribeReceiptRule'
              - 'ses:DescribeActiveReceiptRuleSet'
              - 'ses:GetAccountSendingEnabled'
              - 'ses:SendBulkTemplatedEmail'
              - 'ses:ListVerifiedEmailAddresses'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  invokeLambda:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-invokeLambda"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'lambda:InvokeFunction'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  workDynamo:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-workDynamo"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:ListGlobalTables'
              - 'dynamodb:PutItem'
              - 'dynamodb:ListTables'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:ListBackups'
              - 'dynamodb:GetItem'
              - 'dynamodb:Scan'
              - 'dynamodb:Query'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:DescribeTimeToLive'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  workSensitives:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-workSensitives"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:ListGlobalTables'
              - 'dynamodb:PutItem'
              - 'dynamodb:ListTables'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:ListBackups'
              - 'dynamodb:GetItem'
              - 'dynamodb:Scan'
              - 'dynamodb:Query'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:DescribeTimeToLive'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  queryGql:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-queryGql"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'appsync:ListDataSources'
              - 'appsync:ListFunctions'
              - 'appsync:GetDataSource'
              - 'appsync:ListApiKeys'
              - 'appsync:GetSchemaCreationStatus'
              - 'appsync:GetFunction'
              - 'appsync:GetResolver'
              - 'appsync:ListGraphqlApis'
              - 'appsync:GetGraphqlApi'
              - 'appsync:ListTypes'
              - 'appsync:GetIntrospectionSchema'
              - 'appsync:GraphQL'
              - 'appsync:ListResolvers'
              - 'appsync:GetType'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  workGraph:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-workGraph"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'neptune-db:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  passRole:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-passRole"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'iam:PassRole'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  workKeys:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-workKeys"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  workSqs:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-workSqs"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: 'sqs:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref worker
  workSns:
    Type: 'AWS::IAM::Policy'
    Properties:
       PolicyName: !Sub "${AWS::StackName}-workSns"
       PolicyDocument:
         Version: 2012-10-17
         Statement:
           - Action: 'sns:Publish'
             Resource: '*'
             Effect: Allow
       Roles:
         - !Ref worker
Outputs:
  WorkerRoleArn:
    Description: the ARN of the generated worker IAM role
    Value: !GetAtt
      - worker
      - Arn